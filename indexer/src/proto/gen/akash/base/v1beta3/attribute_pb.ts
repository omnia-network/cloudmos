// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file akash/base/v1beta3/attribute.proto (package akash.base.v1beta3, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Attribute represents key value pair
 *
 * @generated from message akash.base.v1beta3.Attribute
 */
export class Attribute extends Message<Attribute> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: string value = 2;
   */
  value = "";

  constructor(data?: PartialMessage<Attribute>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "akash.base.v1beta3.Attribute";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Attribute {
    return new Attribute().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Attribute {
    return new Attribute().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Attribute {
    return new Attribute().fromJsonString(jsonString, options);
  }

  static equals(a: Attribute | PlainMessage<Attribute> | undefined, b: Attribute | PlainMessage<Attribute> | undefined): boolean {
    return proto3.util.equals(Attribute, a, b);
  }
}

/**
 * SignedBy represents validation accounts that tenant expects signatures for provider attributes
 * AllOf has precedence i.e. if there is at least one entry AnyOf is ignored regardless to how many
 * entries there
 * this behaviour to be discussed
 *
 * @generated from message akash.base.v1beta3.SignedBy
 */
export class SignedBy extends Message<SignedBy> {
  /**
   * all_of all keys in this list must have signed attributes
   *
   * @generated from field: repeated string all_of = 1;
   */
  allOf: string[] = [];

  /**
   * any_of at least of of the keys from the list must have signed attributes
   *
   * @generated from field: repeated string any_of = 2;
   */
  anyOf: string[] = [];

  constructor(data?: PartialMessage<SignedBy>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "akash.base.v1beta3.SignedBy";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "all_of", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "any_of", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignedBy {
    return new SignedBy().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignedBy {
    return new SignedBy().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignedBy {
    return new SignedBy().fromJsonString(jsonString, options);
  }

  static equals(a: SignedBy | PlainMessage<SignedBy> | undefined, b: SignedBy | PlainMessage<SignedBy> | undefined): boolean {
    return proto3.util.equals(SignedBy, a, b);
  }
}

/**
 * PlacementRequirements
 *
 * @generated from message akash.base.v1beta3.PlacementRequirements
 */
export class PlacementRequirements extends Message<PlacementRequirements> {
  /**
   * SignedBy list of keys that tenants expect to have signatures from
   *
   * @generated from field: akash.base.v1beta3.SignedBy signed_by = 1;
   */
  signedBy?: SignedBy;

  /**
   * Attribute list of attributes tenant expects from the provider
   *
   * @generated from field: repeated akash.base.v1beta3.Attribute attributes = 2;
   */
  attributes: Attribute[] = [];

  constructor(data?: PartialMessage<PlacementRequirements>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "akash.base.v1beta3.PlacementRequirements";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "signed_by", kind: "message", T: SignedBy },
    { no: 2, name: "attributes", kind: "message", T: Attribute, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlacementRequirements {
    return new PlacementRequirements().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlacementRequirements {
    return new PlacementRequirements().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlacementRequirements {
    return new PlacementRequirements().fromJsonString(jsonString, options);
  }

  static equals(a: PlacementRequirements | PlainMessage<PlacementRequirements> | undefined, b: PlacementRequirements | PlainMessage<PlacementRequirements> | undefined): boolean {
    return proto3.util.equals(PlacementRequirements, a, b);
  }
}

